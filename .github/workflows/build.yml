name: Build GTFS JSON
on:
  schedule:
    - cron: "15 2 * * *"
  workflow_dispatch: {}
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      PUBLIC_HOST: ${{ secrets.PUBLIC_HOST }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Build JSON
        env:
          GTFS_URL: https://www.transportforireland.ie/transitData/Data/GTFS_Irish_Rail.zip
          OUT_DIR: out
          WINDOW_DAYS: "90"
        run: python scripts/gtfs_json_builder.py

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: gtfs-json
          path: out/
          if-no-files-found: error

      - name: Read version
        id: ver
        run: |
          VER=$(jq -r '.latest' out/latest.json)
          echo "version=$VER" >> "$GITHUB_OUTPUT"

      - name: Install Wrangler
        run: npm i -g wrangler@4

      - name: Check remote latest
        id: diff
        run: |
          set -euo pipefail
          wrangler r2 object get --remote "${R2_BUCKET}/latest.json" --file prev_latest.json || echo '{}' > prev_latest.json
          PREV=$(jq -r '.latest // empty' prev_latest.json)
          CURR="${{ steps.ver.outputs.version }}"
          if [ -n "$PREV" ] && [ "$PREV" = "$CURR" ]; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload versioned JSON to R2
        if: steps.diff.outputs.changed == 'true'
        run: |
          set -euo pipefail
          ROOT="out/gtfs/${{ steps.ver.outputs.version }}"
          find "$ROOT" -type f -name '*.json' | while read -r f; do
            key="gtfs/${{ steps.ver.outputs.version }}/${f##*/}"
            wrangler r2 object put --remote "${R2_BUCKET}/${key}" --file "$f" --cache-control "public, max-age=31536000, immutable" --content-type "application/json"
          done

      - name: Upload pointers to R2
        run: |
          wrangler r2 object put --remote "${R2_BUCKET}/latest.json" --file out/latest.json --cache-control "public, max-age=60" --content-type "application/json"
          wrangler r2 object put --remote "${R2_BUCKET}/status.json" --file out/status.json --cache-control "public, max-age=30" --content-type "application/json"
          wrangler r2 object put --remote "${R2_BUCKET}/windows.json" --file out/windows.json --cache-control "public, max-age=300" --content-type "application/json"

      - name: Generate wrangler.toml
        run: |
          set -euo pipefail
          ZONE_NAME=$(awk -F. '{print $(NF-1)"."$NF}' <<< "$PUBLIC_HOST")
          cat > wrangler.toml <<EOF
          name = "dartdublin-gtfs-api"
          main = "src/index.ts"
          compatibility_date = "2025-10-31"
          workers_dev = false
          r2_buckets = [
            { binding = "GTFS", bucket_name = "${R2_BUCKET}" }
          ]
          routes = [
            { pattern = "${PUBLIC_HOST}/*", zone_name = "${ZONE_NAME}" }
          ]
          EOF
          test -f src/index.ts

      - name: Clear conflicting route
        run: |
          set -euo pipefail
          ZONE_NAME=$(awk -F. '{print $(NF-1)"."$NF}' <<< "$PUBLIC_HOST")
          ZONE_ID=$(curl -fsS -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" -H "Content-Type: application/json" "https://api.cloudflare.com/client/v4/zones?name=${ZONE_NAME}" | jq -r '.result[0].id')
          RID=$(curl -fsS -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" -H "Content-Type: application/json" "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/workers/routes" | jq -r --arg p "${PUBLIC_HOST}/*" '.result[] | select(.pattern==$p) | .id')
          if [ -n "$RID" ]; then
            curl -fsS -X DELETE -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" -H "Content-Type: application/json" "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/workers/routes/${RID}" > /dev/null
          fi

      - name: Deploy Worker
        env:
          CF_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: wrangler deploy --config wrangler.toml

      - name: Smoke test
        run: |
          set -euo pipefail
          curl -fsS "https://${PUBLIC_HOST}/latest.json" | jq .
          V=$(curl -fsS "https://${PUBLIC_HOST}/latest.json" | jq -r '.latest')
          curl -fsS "https://${PUBLIC_HOST}/gtfs/${V}/stops.json" | jq '.[0]'
